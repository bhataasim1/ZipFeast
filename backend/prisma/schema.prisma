// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  name         String
  email        String         @unique
  password     String
  phone        String?
  avatar       String?
  address      String?
  city         String?
  state        String?
  pincode      String?
  role         Role           @relation(fields: [roleId], references: [id])
  roleId       Int            @default(2)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  orders       Order[]
  RefreshToken RefreshToken[]
  Favorite     Favorite[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

model Merchant {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  phone     String
  avatar    String
  address   String
  city      String
  state     String
  pincode   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  Order     Order[]
}

// model Admin {
//   id        Int      @id @default(autoincrement())
//   name      String
//   email     String   @unique
//   password  String
//   phone     String
//   avatar    String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  merchant    Merchant    @relation(fields: [merchantId], references: [id])
  merchantId  Int
  isAvailable Boolean
  image       Image[]
  order       Order[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Favorite    Favorite[]
  OrderItem   OrderItem[]
}

model Order {
  id              Int         @id @default(autoincrement())
  user            User        @relation(fields: [userId], references: [id])
  userId          Int
  merchant        Merchant    @relation(fields: [merchantId], references: [id])
  merchantId      Int
  totalQuantity   Int
  totalAmount     Float
  orderStatus     String
  deliveryAddress String
  paymentMethod   String
  items           OrderItem[]
  products        Product[]
  createdAt       DateTime    @default(now())
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
}

model Image {
  id         Int       @id @default(autoincrement())
  url        String
  product    Product   @relation(fields: [productId], references: [id])
  productId  Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Favorite   Favorite? @relation(fields: [favoriteId], references: [id])
  favoriteId Int?
}

model RefreshToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  userId    Int?
  user      User?     @relation(fields: [userId], references: [id])
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Favorite {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  image       Image[]
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
