// This is your updated Prisma schema file for MySQL.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Define the enum for user roles
enum Role {
  ADMIN
  USER
  MERCHANT
}

// User model represents customers of the app
model User {
  id            Int            @id @default(autoincrement())
  name         String
  email        String         @unique
  password     String
  phone        String?
  avatar       String?
  address      String?
  city         String?
  state        String?
  pincode      String?
  role         Role           @default(USER)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  orders       Order[]
  RefreshToken RefreshToken[]
  Favorite     Favorite[]
}

// Merchant model represents shop owners or sellers
model Merchant {
  id            Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  phone     String
  avatar    String
  address   String
  city      String
  state     String
  pincode   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  Order     Order[]
}

// Product model represents items available for purchase
model Product {
  id            Int         @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  merchant    Merchant    @relation(fields: [merchantId], references: [id])
  merchantId  Int
  isAvailable Boolean
  image       Image[]
  order       Order[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Favorite    Favorite[]
  OrderItem   OrderItem[]
}

// Order model represents a placed order by a User
model Order {
  id              Int         @id @default(autoincrement())
  user            User        @relation(fields: [userId], references: [id])
  userId          Int
  merchant        Merchant    @relation(fields: [merchantId], references: [id])
  merchantId      Int
  totalQuantity   Int
  totalAmount     Float
  orderStatus     String // Use string field for order status
  deliveryAddress String
  paymentMethod   String
  items           OrderItem[]
  products        Product[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

// OrderItem model represents items included in an order
model OrderItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
}

// Image model represents images associated with a product
model Image {
  id          Int       @id @default(autoincrement())
  url        String
  product    Product   @relation(fields: [productId], references: [id])
  productId  Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Favorite   Favorite? @relation(fields: [favoriteId], references: [id])
  favoriteId Int?
}

// RefreshToken model represents refresh tokens for user authentication
model RefreshToken {
  id          Int       @id @default(autoincrement())
  token     String    @unique
  userId    Int?
  user      User?     @relation(fields: [userId], references: [id])
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Favorite model represents user's favorite products
model Favorite {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  image       Image[]
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
